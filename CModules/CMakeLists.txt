cmake_minimum_required(VERSION 2.8.8)
# suppress the warning for "install" target
if(CMAKE_MAJOR_VERSION EQUAL 3)
	cmake_policy(SET CMP0037 OLD)
endif()
project(PTF)
set (PTF_VERSION_MAJOR 1)
set (PTF_VERSION_MINOR 0)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/")
include("${PTF_SOURCE_DIR}/cmake/ptfUtils.cmake")
option(WITH_MTF "Enable MTF based visualization" ON)
option(WITH_CUDA "Enable CUDA version of LK" ON)

if (WIN32)
	set(EIGEN_INCLUDE_DIR_WIN "C:/Eigen/include" CACHE PATH "Eigen header directory")
	set(OPENCV_INCLUDE_DIR_WIN "C:/OpenCV/build/include" CACHE PATH "OpenCV header directory")
	set(OPENCV_LIB_DIR_WIN "C:/OpenCV/build/x86/vc14/lib" CACHE PATH "OpenCV library directory")
	set(OpenCV_SUFFIX "2410" CACHE STRING "OpenCV Suffix")	
	set(OpenCV_COMPONENTS calib3d contrib core features2d flann gpu highgui imgproc legacy ml nonfree objdetect ocl photo stitching superres video videostab)
	set(DEFINITION_SWITCH "/D")
	set(INCLUDE_SWITCH "/I")
	set(LINK_SWITCH "/l")
endif()


message(STATUS "Getting OpenCV headers from: ${OpenCV_INCLUDE_DIRS}")
# message(STATUS "Getting OpenCV libraries from: ${OpenCV_LIBRARY_DIRS}")
message(STATUS "Using OpenCV libraries: ${OpenCV_LIBS}")

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release CACHE STRING "Build type" FORCE)
endif()
if (WIN32)
	set(PTF_LIB_INSTALL_DIR_DEFAULT C:/MDP/lib)
	set(PTF_HEADER_INSTALL_DIR_DEFAULT  C:/MDP/include)
	set(PTF_PY_INSTALL_DIR_DEFAULT C:/Python27/Lib/site-packages)
else()
	set(PTF_LIB_INSTALL_DIR_DEFAULT /usr/local/lib)
	set(PTF_HEADER_INSTALL_DIR_DEFAULT  /usr/local/include)
	set(PTF_PY_INSTALL_DIR_DEFAULT /usr/local/lib/python2.7/dist-packages)
endif()
set(PY_VER 2.7 CACHE STRING "Python version for which to build")
set(PTF_LIB_INSTALL_DIR ${PTF_LIB_INSTALL_DIR_DEFAULT} CACHE PATH "Directory to install the library")
set(PTF_HEADER_INSTALL_DIR ${PTF_HEADER_INSTALL_DIR_DEFAULT} CACHE PATH "Directory to install the header")
set(PTF_PY_INSTALL_DIR ${PTF_PY_INSTALL_DIR_DEFAULT} CACHE PATH "Directory to install the Python interface module") 

set(PTF_LIBS ${OpenCV_LIBS})
set(PTF_EXT_INCLUDE_DIRS ${OpenCV_INCLUDE_DIRS})

if (WIN32)
	set(PTF_COMPILETIME_FLAGS /bigobj /arch:SSE2)
	option(WITH_FAST_FP "Enable fast floating point operations optimization in Visual C++" ON)
	if(WITH_FAST_FP)
		set(PTF_COMPILETIME_FLAGS ${PTF_COMPILETIME_FLAGS} /fp:fast)
	endif()
	option(WITH_FULL_OPTIMIZATION "Enable full optimization in Visual C++" OFF)
	if(WITH_FULL_OPTIMIZATION)
		set(CMAKE_CXX_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE} /Ox)
	endif()
	# set(WARNING_FLAGS /W4)
else()
	set(WARNING_FLAGS -Wfatal-errors -Wno-write-strings -Wno-unused-result -Wformat=0)
	set(PTF_COMPILETIME_FLAGS -std=c++11)
endif()
set(PTF_DEFINITIONS ${PTF_DEFINITIONS} NDEBUG EIGEN_NO_DEBUG)
# set(PTF_COMPILETIME_FLAGS ${PTF_COMPILETIME_FLAGS} ${HEADER_DEF_SWITCH}NDEBUG ${HEADER_DEF_SWITCH}EIGEN_NO_DEBUG)
set(PTF_RUNTIME_FLAGS ${WARNING_FLAGS} ${PTF_COMPILETIME_FLAGS})

message(STATUS "PTF_COMPILETIME_FLAGS: ${PTF_COMPILETIME_FLAGS}")
message(STATUS "PTF_RUNTIME_FLAGS: ${PTF_RUNTIME_FLAGS}")
message(STATUS "PTF_DEFINITIIIONS: ${PTF_DEFINITIONS}")
message(STATUS "CMAKE_CXX_FLAGS: ${CMAKE_CXX_FLAGS}")
message(STATUS "CMAKE_C_FLAGS: ${CMAKE_C_FLAGS}")

find_package(PythonLibs ${PY_VER})
find_package(NumPy)
if(PYTHONLIBS_FOUND AND PYTHON_NUMPY_FOUND)
	message(STATUS "PYTHON_LIBRARY: ${PYTHON_LIBRARY}")
	message(STATUS "PYTHON_INCLUDE_DIR: ${PYTHON_INCLUDE_DIR}")

	add_library(winUtils MODULE winUtils.cc)
	set_target_properties(winUtils PROPERTIES PREFIX "")
	if(WIN32)
		set_target_properties(winUtils PROPERTIES SUFFIX ".pyd")
	endif()
	target_compile_definitions(winUtils PUBLIC ${PTF_DEFINITIONS})
	target_compile_options(winUtils PUBLIC ${PTF_RUNTIME_FLAGS} ${PTF_COMPILETIME_FLAGS})
	target_include_directories(winUtils PUBLIC ${PTF_INCLUDE_DIRS} ${PTF_EXT_INCLUDE_DIRS} ${PYTHON_INCLUDE_DIRS} ${PYTHON_NUMPY_INCLUDE_DIR})
	target_link_libraries(winUtils ${PTF_LIBS} ${PYTHON_LIBRARIES} ${PYTHON_LIBS})	
	install(TARGETS winUtils LIBRARY DESTINATION ${PTF_PY_INSTALL_DIR} COMPONENT _winUtils_)
	add_custom_target(_winUtils_ DEPENDS winUtils)
	set(EX_TARGET_NAMES ${EX_TARGET_NAMES} winUtils)

	find_package(OpenCV)
	if(OpenCV_FOUND)
		add_library(winUtils2 MODULE winUtils2.cc)
		set_target_properties(winUtils2 PROPERTIES PREFIX "")
		if(WIN32)
			set_target_properties(winUtils2 PROPERTIES SUFFIX ".pyd")
		endif()
		target_compile_definitions(winUtils2 PUBLIC ${PTF_DEFINITIONS})
		target_compile_options(winUtils2 PUBLIC ${PTF_RUNTIME_FLAGS} ${PTF_COMPILETIME_FLAGS})
		target_include_directories(winUtils2 PUBLIC ${PTF_INCLUDE_DIRS} ${PTF_EXT_INCLUDE_DIRS} ${PYTHON_INCLUDE_DIRS} ${PYTHON_NUMPY_INCLUDE_DIR} ${OpenCV_INCLUDE_DIRS})
		target_link_libraries(winUtils2 ${PTF_LIBS} ${PYTHON_LIBRARIES} ${PYTHON_LIBS} ${OpenCV_LIBS})	
		install(TARGETS winUtils2 LIBRARY DESTINATION ${PTF_PY_INSTALL_DIR} COMPONENT _winUtils2_)
		add_custom_target(_winUtils2_ DEPENDS winUtils2)
		set(EX_TARGET_NAMES ${EX_TARGET_NAMES} winUtils2)
	else()
		message(STATUS "OpenCV not found so winUtils2 is disabled")
	endif()	
else()
	message(STATUS "Python and/or Numpy not found so pyPTF is disabled")
endif()