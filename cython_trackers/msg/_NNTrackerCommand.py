"""autogenerated by genpy from nntracker/NNTrackerCommand.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import nntracker.msg

class NNTrackerCommand(genpy.Message):
  _md5sum = "29651c54b309964839e65c955a7ac207"
  _type = "nntracker/NNTrackerCommand"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# A message type that allows us to send commands to the tracker

string command
NNTrackerROI region
================================================================================
MSG: nntracker/NNTrackerROI
# Description of a warped rectangular region

float32 ulx
float32 uly

float32 urx
float32 ury

float32 lrx
float32 lry	

float32 llx
float32 lly


"""
  __slots__ = ['command','region']
  _slot_types = ['string','nntracker/NNTrackerROI']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       command,region

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NNTrackerCommand, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.command is None:
        self.command = ''
      if self.region is None:
        self.region = nntracker.msg.NNTrackerROI()
    else:
      self.command = ''
      self.region = nntracker.msg.NNTrackerROI()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.command
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_8f.pack(_x.region.ulx, _x.region.uly, _x.region.urx, _x.region.ury, _x.region.lrx, _x.region.lry, _x.region.llx, _x.region.lly))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.region is None:
        self.region = nntracker.msg.NNTrackerROI()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.command = str[start:end].decode('utf-8')
      else:
        self.command = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.region.ulx, _x.region.uly, _x.region.urx, _x.region.ury, _x.region.lrx, _x.region.lry, _x.region.llx, _x.region.lly,) = _struct_8f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.command
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_8f.pack(_x.region.ulx, _x.region.uly, _x.region.urx, _x.region.ury, _x.region.lrx, _x.region.lry, _x.region.llx, _x.region.lly))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.region is None:
        self.region = nntracker.msg.NNTrackerROI()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.command = str[start:end].decode('utf-8')
      else:
        self.command = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.region.ulx, _x.region.uly, _x.region.urx, _x.region.ury, _x.region.lrx, _x.region.lry, _x.region.llx, _x.region.lly,) = _struct_8f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_8f = struct.Struct("<8f")
