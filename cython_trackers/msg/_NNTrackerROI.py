"""autogenerated by genpy from nntracker/NNTrackerROI.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class NNTrackerROI(genpy.Message):
  _md5sum = "9c35c2d7823072d4830b31f000494129"
  _type = "nntracker/NNTrackerROI"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Description of a warped rectangular region

float32 ulx
float32 uly

float32 urx
float32 ury

float32 lrx
float32 lry	

float32 llx
float32 lly


"""
  __slots__ = ['ulx','uly','urx','ury','lrx','lry','llx','lly']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ulx,uly,urx,ury,lrx,lry,llx,lly

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NNTrackerROI, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ulx is None:
        self.ulx = 0.
      if self.uly is None:
        self.uly = 0.
      if self.urx is None:
        self.urx = 0.
      if self.ury is None:
        self.ury = 0.
      if self.lrx is None:
        self.lrx = 0.
      if self.lry is None:
        self.lry = 0.
      if self.llx is None:
        self.llx = 0.
      if self.lly is None:
        self.lly = 0.
    else:
      self.ulx = 0.
      self.uly = 0.
      self.urx = 0.
      self.ury = 0.
      self.lrx = 0.
      self.lry = 0.
      self.llx = 0.
      self.lly = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_8f.pack(_x.ulx, _x.uly, _x.urx, _x.ury, _x.lrx, _x.lry, _x.llx, _x.lly))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.ulx, _x.uly, _x.urx, _x.ury, _x.lrx, _x.lry, _x.llx, _x.lly,) = _struct_8f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_8f.pack(_x.ulx, _x.uly, _x.urx, _x.ury, _x.lrx, _x.lry, _x.llx, _x.lly))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.ulx, _x.uly, _x.urx, _x.ury, _x.lrx, _x.lry, _x.llx, _x.lly,) = _struct_8f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_8f = struct.Struct("<8f")
